- name: Install Docker GPG key
  shell: "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg"
  become: yes

- name: Install docker engine repo
  shell: 'echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null'

- name: Update apt-get repo and cache
  apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
  become: yes

- name: Upgrade all apt packages
  apt: upgrade=dist force_apt_get=yes
  become: yes

- name: install common utilities on Debian machines
  apt: pkg={{ item }} state=present
  tags: install
  become: yes
  with_items:
    - curl
    - git
    - build-essential
    - tmux
    - smem # Tool that does good job of figuring out "real" memory use of processes
    - automake
    - silversearcher-ag
    - fzf
    - fd-find
    - ripgrep
    - kitty
    - luajit
    - python
    - python3-pip
    - golang-go
      # For building nvim
    - ninja-build
    - gettext
    - libtool 
    - libtool-bin
    - autoconf
    - automake 
    - cmake 
    - g++ 
    - pkg-config 
    - unzip 
    - curl 
    - doxygen
    - docker-ce
    - docker-ce-cli
    - containerd.io

- name: link fdfind binary to fd
  shell: "ln -sf $(which fdfind) ~/.local/bin/fd"

- name: Add user to docker group
  shell: "sudo groupadd docker && sudo gpasswd -a ${USER} docker && sudo service docker restart && newgrp docker"

##
# node.js installation (latest stable instead of Ubuntu's out-of-date one)
#
- name: Node.js | Run the debian setup.
  shell: "curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -"
  tags: nodejs
  become: yes

- name: Node.js | Install nodejs and npm
  apt: pkg={{ item }} state=present
  tags: nodejs
  become: yes
  with_items:
    - nodejs

# Install neovim w/ an appimage
# TODO maybe fix - compiling from source seems easier for now.
# - name: Install neovim

  # shell: "wget https://github.com/neovim/neovim/releases/download/stable/nvim.appimage -O /opt/nvim.appimage"
  # become: yes

# - name: neovim permissions
  # shell: "chmod u+x /opt/nvim.appimage"

# Ubuntu is on an old version of go that doesn't have `go install` yet
- name: install efm language server (for neovim)
  shell: "go get github.com/mattn/efm-langserver"

# docker-compose
- name: Install docker-compose
  shell: "curl -L https://github.com/docker/compose/releases/download/v2.1.0/docker-compose-linux-aarch64 -o /usr/local/bin/docker-compose" && chmod +x
