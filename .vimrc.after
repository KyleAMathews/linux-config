let g:solarized_termcolors=256
set t_Co=16
set background=dark
colorscheme solarized

" Php, php3, php4, etc.
au BufNewFile,BufRead *.{module,install} set filetype=php.drupal | runtime! ftplugin/php.vim | runtime! syntax/php.vim

" Show a colored column at 85 characters.
set colorcolumn=85

" Save file automatically when lose focus
au FocusLost * :wa

" Strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Map jj to <ESC> to make it easier to move to normal mode
inoremap jj <ESC>

" Make it easier to work with split windows

" Open a new vertical split and switch to it
nnoremap <leader>w <C-w>v<C-w>l

" Open a new horizontal split and switch to it
nnoremap <leader>h <C-w>s<C-w>l

" Map Ctrl plus normal navigation keys to move around splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-=> <C-w>=

" Mapping for using Ack
"nnoremap <leader>a :Ack

" Get Ack to work
"let g:ackprg="ack-grep -H --nocolor --nogroup --column"

" Fold tag function
nnoremap <leader>ft vatzf

" Create an undo file for each file edited.
set undofile

" Clear out search
nnoremap <leader><space> :noh<cr>

" Make Tab work for switching between matching bracket pairs
nnoremap <tab> %
vnoremap <tab> %

" Open up this file in a new vertical split window
nnoremap <leader>vc <C-w><C-v><C-l>:e ~/.vimrc.local<cr>

" Make moving between tabs sane
map tl :tabnext<CR>
map th :tabprev<CR>
map tn :tabnew<CR>
map td :tabclose<CR>

" Map ; to :
nnoremap ; :

" Remove 'flashing' in GVIM
set novb

" Bindings for Tagbar
let g:tagbar_usearrows = 1
nnoremap <leader>l :TagbarToggle<CR>

" Bind leader-u to open a terminal window in a new split window.
nnoremap <leader>u :ConqueTerm bash --login<CR>

" Bind leader-r to reformat a paragraph when in writing mode.
nnoremap <leader>r gqap<CR>

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Binding for buffer search using buffer search by CtrlP
:nmap <C-o> :CtrlPBuffer<CR>

" Set the font to Consolas on windows and Inconsolata every else.
" Code from http://stackoverflow.com/questions/3316244/set-gvim-font-in-vimrc-file
if has("gui_running")
  if has("gui_gtk2")
    set guifont=Inconsolata\ 12
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  endif
endif

function! EscapeString (string)
  let string=a:string
  " Escape regex characters
  let string = escape(string, '^$.*\/~[]')
  " Escape the line endings
  let string = substitute(string, '\n', '\\n', 'g')
  return string
endfunction

" Get the current visual block for search and replaces
" This function passed the visual block through a string escape function
" Based on this - http://stackoverflow.com/questions/676600/vim-replace-selected-text/677918#677918
function! GetVisual() range
  " Save the current register and clipboard
  let reg_save = getreg('"')
  let regtype_save = getregtype('"')
  let cb_save = &clipboard
  set clipboard&

  " Put the current visual selection in the " register
  normal! ""gvy
  let selection = getreg('"')

  " Put the saved registers and clipboards back
  call setreg('"', reg_save, regtype_save)
  let &clipboard = cb_save

  "Escape any special characters in the selection
  let escaped_selection = EscapeString(selection)

  return escaped_selection
endfunction

" Start the find and replace command across the entire file
vmap <leader>z <Esc>:%s/<c-r>=GetVisual()<cr>/

set clipboard=unnamed
